name: Proxy tests

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  proxy_tests:
    name: "proxy_tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:

    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] create network"
      run: |
        docker network create acme

    - name: "[ PREPARE ] proxy container"
      run: |
        docker pull mosajjal/pproxy:latest
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ PREPARE ] Sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "[ PREPARE ] Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        docker-compose up -d
        docker-compose logs

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] setup openssl ca_handler"
      run: |
        sudo cp examples/ca_handler/openssl_ca_handler.py examples/Docker/data/ca_handler.py
        sudo mkdir -p examples/Docker/data/acme_ca/certs
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem examples/Docker/data/acme_ca/
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nproxy_server_list: {\"acme-sh.acme\$\": \"socks5:\/\/proxy.acme:8080\", \"acme-sh.\$\": \"http\:\/\/proxy.acme:8080\"}/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "Test http://acme-srv/directory is accessable again"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ ENROLL ] acme.sh - http challenge validation"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme -d acme-sh. --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ CHECK ] proxy logs"
      run: |
        docker logs proxy | grep socks5 | grep -- "->"
        docker logs proxy | grep http | grep -- "->"
        docker stop proxy
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ ENROLL ] acme.sh - alpn challenge validation"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn -d acme-sh. --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ CHECK ] proxy logs"
      run: |
        docker logs proxy | grep socks5 | grep -- "->"
        docker logs proxy | grep http | grep -- "->"
        docker stop proxy
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ PREPARE ] setup certifier ca_handler for proxy usage"
      run: |
        sudo cp examples/ca_handler/certifier_ca_handler.py examples/Docker/data/ca_handler.py
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "api_host: ${{ secrets.NCM_API_HOST }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_user: ${{ secrets.NCM_API_USER }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_password: ${{ secrets.NCM_API_PASSWORD }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: ${{ secrets.NCM_CA_NAME }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: ${{ secrets.NCM_CA_BUNDLE }}" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nproxy_server_list: {\"ncm.nclm.eu\$\": \"socks5:\/\/proxy.acme:8080\"}/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ ENROLL ] via certifier ca_handler"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        # openssl verify -CAfile acme.sh/acme-sh.acme/ca.cer acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ REVOKE ] via certifier ca_handler"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --revoke -d acme-sh.acme --standalone --debug 3 --output-insecure

    - name: "[ CHECK ] proxy logs"
      run: |
        docker logs proxy | grep socks5 | grep -- "->"
        docker stop proxy
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ PREPARE ] setup msca ca_handler for proxy usage"
      run: |
        sudo cp examples/ca_handler/mscertsrv_ca_handler.py examples/Docker/data/ca_handler.py
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "host: ${{ secrets.MSCA_NAME }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: ${{ secrets.NCLM_API_USER }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: ${{ secrets.NCLM_API_PASSWORD }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: ${{ secrets.MSCA_AUTHMETHOD }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: ${{ secrets.MSCA_TEMPLATE }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nproxy_server_list: {\"amazonaws.com\$\": \"socks5:\/\/proxy.acme:8080\"}/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ ENROLL ] via msca ca_handler"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        # openssl verify -CAfile acme.sh/acme-sh.acme/ca.cer acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ CHECK ] proxy logs"
      run: |
        docker logs proxy | grep socks5 | grep -- "->"
        docker stop proxy
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ PREPARE ] patch est_ca handler for testrfc7030.com"
      run: |
        sudo apt-get install curl openssl patch
        sudo cp examples/ca_handler/est_ca_handler.py examples/Docker/data/ca_handler.py
        # sudo patch examples/Docker/data/ca_handler.py .github/est_handler.patch

    - name: "[ PREPARE ] setup using http-basic-auth for proxy usage"
      run: |
        sudo mkdir -p examples/Docker/data/est
        sudo chmod -R 777 examples/Docker/data/est
        sudo touch $HOME/.rnd
        sudo openssl ecparam -genkey -name prime256v1 -out examples/Docker/data/est/est_client_key.pem
        sudo openssl req -new -key examples/Docker/data/est/est_client_key.pem -out /tmp/request.p10 -subj '/CN=acme2certifier'
        sudo curl http://testrfc7030.com/dstcax3.pem --output /tmp/dstcax3.pem
        sudo curl https://testrfc7030.com:8443/.well-known/est/cacerts -o /tmp/cacerts.p7 --cacert /tmp/dstcax3.pem
        sudo openssl base64 -d -in /tmp/cacerts.p7 | openssl pkcs7 -inform DER -outform PEM -print_certs -out examples/Docker/data/est/ca_bundle.pem
        sudo curl https://testrfc7030.com:8443/.well-known/est/simpleenroll --anyauth -u estuser:estpwd -s -o /tmp/cert.p7 --cacert /tmp/dstcax3.pem --data-binary @/tmp/request.p10 -H "Content-Type: application/pkcs10" --dump-header /tmp/resp.hdr
        sudo openssl base64 -d -in /tmp/cert.p7 | openssl pkcs7 -inform DER -outform PEM -print_certs -out examples/Docker/data/est/est_client_cert.pem
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -4 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "est_host: https://testrfc7030.com:8443" >> examples/Docker/data/acme_srv.cfg
        sudo echo "est_user: estuser" >> examples/Docker/data/acme_srv.cfg
        sudo echo "est_password: estpwd" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: False" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nproxy_server_list: {\"testrfc7030.com\$\": \"socks5:\/\/proxy.acme:8080\"}/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ ENROLL ] via EST using http-basic-auth"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force

    - name: "[ CHECK ] proxy logs"
      run: |
        docker logs proxy | grep socks5 | grep -- "->"
        docker stop proxy
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ PREPARE ] setup using tls-client-auth"
      run: |
        sudo head -n -4 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "est_host: https://testrfc7030.com:9443" >> examples/Docker/data/acme_srv.cfg
        sudo echo "est_client_key: volume/est/est_client_key.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "est_client_cert: volume/est/est_client_cert.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: False" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nproxy_server_list: {\"testrfc7030.com\$\": \"http:\/\/proxy.acme:8080\"}/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ ENROLL ] via est using tls-client-auth"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        # openssl verify -CAfile acme.sh/acme-sh.acme/ca.cer acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ CHECK ] proxy logs"
      run: |
        docker logs proxy | grep http | grep -- "->"
        docker stop proxy
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ PREPARE ] setup nclm ca_handler for proxy usage"
      run: |
        sudo cp examples/ca_handler/nclm_ca_handler.py examples/Docker/data/ca_handler.py
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "api_host: ${{ secrets.NCLM_API_HOST }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_user: ${{ secrets.NCLM_API_USER }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_password: ${{ secrets.NCLM_API_PASSWORD }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "tsg_name: ${{ secrets.NCLM_TSG_NAME }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: ${{ secrets.NCLM_CA_NAME }}" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_id_list: [${{ secrets.NCLM_CA_ID_LIST }}]" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nproxy_server_list: {\"nclm.eu\$\": \"http:\/\/proxy.acme:8080\"}/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ ENROLL ] via nclm ca_handler"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        # openssl verify -CAfile acme.sh/acme-sh.acme/ca.cer acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ CHECK ] proxy logs"
      run: |
        docker logs proxy | grep http | grep -- "->"
        docker stop proxy
        docker run -d -it --name=proxy --network acme --rm -p 8080:8080 mosajjal/pproxy:latest -vv &

    - name: "[ stop ] proxy container"
      run: |
        docker stop proxy

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: proxy.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
